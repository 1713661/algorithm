from collections import deque

def solution(begin, target, words):
    # 그래프에 인덱스값 넣어주기
    length = len(begin)
    newwords = words[:]
    newwords.insert(0,begin)
    
    if not target in newwords: ##### 문제조건잘보기
        return 0
    
    graph = [set() for i in range(len(newwords))]
    
    for word in newwords:
        for nxtword in newwords:
            diff = 0
            idx = length
            for s in range(len(begin)):
                if word[s] == nxtword[s]: continue
                elif word[s]!=nxtword[s] and diff==0:
                    diff += 1
                else: 
                    idx = s
                    break
            if diff==1 and idx==length:
                idx1 = newwords.index(word)
                idx2 = newwords.index(nxtword)
                graph[idx1].add(idx2)
                graph[idx2].add(idx1)

    for i in range(len(graph)):
        graph[i]=list(graph[i])

        
    visited = [False]*len(newwords)
    queue = deque()
    visited[0]=True
    queue.append((0,0))
    while queue:
        x,cnt = queue.popleft()
        if x==newwords.index(target):
            return cnt
        for nxt in graph[x]:
            if not visited[nxt]:
                visited[nxt]=True
                queue.append((nxt,cnt+1))
    return 0

정확성  테스트
테스트 1 〉	통과 (0.03ms, 10.4MB)
테스트 2 〉	통과 (0.71ms, 10.3MB)
테스트 3 〉	통과 (1.35ms, 10.3MB)
테스트 4 〉	통과 (0.06ms, 10.4MB)
테스트 5 〉	통과 (0.00ms, 10.2MB)

# 다른사람코드 wjdtmdgml님
from collections import deque

def compare(compare_word,words):
    a=list()
    for word in words:
        if sum((1 if a!=b else 0) for a,b in zip(word,compare_word))==1:
            a.append(word)
    return a

def solution(begin, target, words):
    ch=set([begin])
    dq=deque([(begin,0)])
    if target not in words: return 0 ######### 문제조건 잘 봤어야함
    while dq:
        start,cnt=dq.popleft()
        if start==target:   return cnt
        for word in compare(start,words):
            if word not in ch:
                ch.add(word)
                dq.append([word,cnt+1])
    
    return 0

정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.4MB)
테스트 2 〉	통과 (0.09ms, 10.2MB)
테스트 3 〉	통과 (0.44ms, 10.3MB)
테스트 4 〉	통과 (0.01ms, 10.3MB)
테스트 5 〉	통과 (0.00ms, 10.3MB)v